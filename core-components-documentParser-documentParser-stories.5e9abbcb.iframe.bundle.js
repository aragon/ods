"use strict";(self.webpackChunk_aragon_ods=self.webpackChunk_aragon_ods||[]).push([[5313],{"./src/core/components/documentParser/documentParser.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithHTML:()=>WithHTML,WithMarkdown:()=>WithMarkdown,WithMixedContent:()=>WithMixedContent,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const meta={title:"Core/Components/DocumentParser",component:__webpack_require__("./src/core/components/documentParser/documentParser.tsx").t,parameters:{docs:{description:{component:"DocumentParser component is used to render HTML or Markdown content in a read-only format."}}}},Default={args:{document:"Hello, world!"}},WithMarkdown={args:{document:"# Markdown Heading\n\nThis is a **markdown** ~~formatted text~~ with `inline code`.\n\n- Markdown *list item 1*\n    - Markdown _sublist item 2_\n\n```javascript\nconst x = 10;\n```\n\n![Sample Image](https://via.placeholder.com/150x150)\n"}},WithHTML={args:{document:'\n<h1>HTML Heading</h1>\n<p>This is a <strong>HTML</strong> <del>formatted text</del> with <code>inline code</code>.</p>\n<ul>\n    <li>HTML <em>list item 1</em>\n        <ul>\n            <li>HTML <em>sublist item 2</em></li>\n        </ul>\n    </li>\n</ul>\n<pre><code>const x = 10;</code></pre>\n<img src="https://via.placeholder.com/150x150" alt="Sample Image">\n'}},WithMixedContent={args:{document:'\n# Heading in Markdown\n\nThis is a paragraph in **Markdown** with some *emphasis*.\n\n\x3c!-- HTML tags --\x3e\n<div style="color: blue;">This line is styled with HTML <strong>strong</strong> and uses a <em>Markdown</em> tag.</div>\n\n<code><pre>const x = 10;</pre></code>\n\n<blockquote>\n    This is a blockquote in HTML.\n    <p>This is a paragraph within the blockquote.</p>\n</blockquote>\n\n- Markdown list item 1\n- Markdown list item 2\n\n<a href="https://example.com" title="Example Link">Example Link</a>\n'}},__WEBPACK_DEFAULT_EXPORT__=meta,__namedExportsOrder=["Default","WithMarkdown","WithHTML","WithMixedContent"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    document: 'Hello, world!'\n  }\n}",...Default.parameters?.docs?.source},description:{story:"Default use case for the DocumentParser component with a basic string.",...Default.parameters?.docs?.description}}},WithMarkdown.parameters={...WithMarkdown.parameters,docs:{...WithMarkdown.parameters?.docs,source:{originalSource:"{\n  args: {\n    document: `# Markdown Heading\n\nThis is a **markdown** ~~formatted text~~ with \\`inline code\\`.\n\n- Markdown *list item 1*\n    - Markdown _sublist item 2_\n\n\\`\\`\\`javascript\nconst x = 10;\n\\`\\`\\`\n\n![Sample Image](https://via.placeholder.com/150x150)\n`\n  }\n}",...WithMarkdown.parameters?.docs?.source},description:{story:"DocumentParser component with markdown content, including a code block formatted correctly without unintended indentation, and an image.",...WithMarkdown.parameters?.docs?.description}}},WithHTML.parameters={...WithHTML.parameters,docs:{...WithHTML.parameters?.docs,source:{originalSource:'{\n  args: {\n    document: `\n<h1>HTML Heading</h1>\n<p>This is a <strong>HTML</strong> <del>formatted text</del> with <code>inline code</code>.</p>\n<ul>\n    <li>HTML <em>list item 1</em>\n        <ul>\n            <li>HTML <em>sublist item 2</em></li>\n        </ul>\n    </li>\n</ul>\n<pre><code>const x = 10;</code></pre>\n<img src="https://via.placeholder.com/150x150" alt="Sample Image">\n`\n  }\n}',...WithHTML.parameters?.docs?.source},description:{story:"DocumentParser component with HTML content, matched to Markdown including sublist and an image.",...WithHTML.parameters?.docs?.description}}},WithMixedContent.parameters={...WithMixedContent.parameters,docs:{...WithMixedContent.parameters?.docs,source:{originalSource:'{\n  args: {\n    document: `\n# Heading in Markdown\n\nThis is a paragraph in **Markdown** with some *emphasis*.\n\n\x3c!-- HTML tags --\x3e\n<div style="color: blue;">This line is styled with HTML <strong>strong</strong> and uses a <em>Markdown</em> tag.</div>\n\n<code><pre>const x = 10;</pre></code>\n\n<blockquote>\n    This is a blockquote in HTML.\n    <p>This is a paragraph within the blockquote.</p>\n</blockquote>\n\n- Markdown list item 1\n- Markdown list item 2\n\n<a href="https://example.com" title="Example Link">Example Link</a>\n`\n  }\n}',...WithMixedContent.parameters?.docs?.source},description:{story:"DocumentParser component with mixed Markdown and HTML content.",...WithMixedContent.parameters?.docs?.description}}};try{Default.displayName="Default",Default.__docgenInfo={description:"Default use case for the DocumentParser component with a basic string.",displayName:"Default",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/core/components/documentParser/documentParser.stories.tsx#Default"]={docgenInfo:Default.__docgenInfo,name:"Default",path:"src/core/components/documentParser/documentParser.stories.tsx#Default"})}catch(__react_docgen_typescript_loader_error){}try{WithMarkdown.displayName="WithMarkdown",WithMarkdown.__docgenInfo={description:"DocumentParser component with markdown content, including a code block formatted correctly without unintended indentation, and an image.",displayName:"WithMarkdown",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/core/components/documentParser/documentParser.stories.tsx#WithMarkdown"]={docgenInfo:WithMarkdown.__docgenInfo,name:"WithMarkdown",path:"src/core/components/documentParser/documentParser.stories.tsx#WithMarkdown"})}catch(__react_docgen_typescript_loader_error){}try{WithHTML.displayName="WithHTML",WithHTML.__docgenInfo={description:"DocumentParser component with HTML content, matched to Markdown including sublist and an image.",displayName:"WithHTML",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/core/components/documentParser/documentParser.stories.tsx#WithHTML"]={docgenInfo:WithHTML.__docgenInfo,name:"WithHTML",path:"src/core/components/documentParser/documentParser.stories.tsx#WithHTML"})}catch(__react_docgen_typescript_loader_error){}try{WithMixedContent.displayName="WithMixedContent",WithMixedContent.__docgenInfo={description:"DocumentParser component with mixed Markdown and HTML content.",displayName:"WithMixedContent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/core/components/documentParser/documentParser.stories.tsx#WithMixedContent"]={docgenInfo:WithMixedContent.__docgenInfo,name:"WithMixedContent",path:"src/core/components/documentParser/documentParser.stories.tsx#WithMixedContent"})}catch(__react_docgen_typescript_loader_error){}}}]);