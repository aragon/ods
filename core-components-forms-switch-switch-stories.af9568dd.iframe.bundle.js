"use strict";(self.webpackChunk_aragon_ods=self.webpackChunk_aragon_ods||[]).push([[5371],{"./src/core/components/forms/switch/switch.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Controlled:()=>Controlled,Uncontrolled:()=>Uncontrolled,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_switch__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/core/components/forms/switch/switch.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const meta={title:"Core/Components/Forms/Switch",component:_switch__WEBPACK_IMPORTED_MODULE_1__.d,parameters:{design:{type:"figma",url:"https://www.figma.com/file/ISSDryshtEpB7SUSdNqAcw/branch/jfKRr1V9evJUp1uBeyP3Zz/Aragon-ODS?node-id=8850%3A12962&mode=dev"}}},Uncontrolled={args:{inlineLabel:"Show testnets",name:"testnet",defaultChecked:!0,onCheckedChanged:void 0}},Controlled={render:({onCheckedChanged,...props})=>{const[checked,setChecked]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_switch__WEBPACK_IMPORTED_MODULE_1__.d,{checked,onCheckedChanged:setChecked,...props})},args:{inlineLabel:"Show testnets",name:"testnet"}},__WEBPACK_DEFAULT_EXPORT__=meta,__namedExportsOrder=["Uncontrolled","Controlled"];Uncontrolled.parameters={...Uncontrolled.parameters,docs:{...Uncontrolled.parameters?.docs,source:{originalSource:"{\n  args: {\n    inlineLabel: 'Show testnets',\n    name: 'testnet',\n    defaultChecked: true,\n    onCheckedChanged: undefined\n  }\n}",...Uncontrolled.parameters?.docs?.source},description:{story:"`Switch` used as an uncontrolled component",...Uncontrolled.parameters?.docs?.description}}},Controlled.parameters={...Controlled.parameters,docs:{...Controlled.parameters?.docs,source:{originalSource:"{\n  render: ({\n    onCheckedChanged,\n    ...props\n  }: ISwitchProps) => {\n    const [checked, setChecked] = useState(false);\n    return <Switch checked={checked} onCheckedChanged={setChecked} {...props} />;\n  },\n  args: {\n    inlineLabel: 'Show testnets',\n    name: 'testnet'\n  }\n}",...Controlled.parameters?.docs?.source},description:{story:"Controlled usage of the `Switch` component",...Controlled.parameters?.docs?.description}}};try{Uncontrolled.displayName="Uncontrolled",Uncontrolled.__docgenInfo={description:"`Switch` used as an uncontrolled component",displayName:"Uncontrolled",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/core/components/forms/switch/switch.stories.tsx#Uncontrolled"]={docgenInfo:Uncontrolled.__docgenInfo,name:"Uncontrolled",path:"src/core/components/forms/switch/switch.stories.tsx#Uncontrolled"})}catch(__react_docgen_typescript_loader_error){}try{Controlled.displayName="Controlled",Controlled.__docgenInfo={description:"Controlled usage of the `Switch` component",displayName:"Controlled",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/core/components/forms/switch/switch.stories.tsx#Controlled"]={docgenInfo:Controlled.__docgenInfo,name:"Controlled",path:"src/core/components/forms/switch/switch.stories.tsx#Controlled"})}catch(__react_docgen_typescript_loader_error){}}}]);